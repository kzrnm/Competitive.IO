// <auto-generated>
// This code was generated by T4 template. Do not change this code.
// </auto-generated>
using System;

namespace Kzrnm.Competitive.IO
{
    public struct PropertyRepeatReader
    {
        readonly PropertyConsoleReader cr;
        readonly int count;
        internal PropertyRepeatReader(PropertyConsoleReader cr, int count)
        {
            this.cr = cr; this.count = count;
        }
        public T[] Select<T>(Func<PropertyConsoleReader, T> factory)
        {
            var arr = new T[count];
            for (var i = 0; i < count; i++)
                arr[i] = factory(cr);
            return arr;
        }
        public T[] Select<T>(Func<PropertyConsoleReader, int, T> factory)
        {
            var arr = new T[count];
            for (var i = 0; i < count; i++)
                arr[i] = factory(cr, i);
            return arr;
        }
        public string[] Line
        {
            get
            {
                var arr = new string[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Line;
                return arr;
            }
        }
        public string[] String
        {
            get
            {
                var arr = new string[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.String;
                return arr;
            }
        }
        public string[] Ascii
        {
            get
            {
                var arr = new string[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Ascii;
                return arr;
            }
        }
        public int[] Int
        {
            get
            {
                var arr = new int[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Int;
                return arr;
            }
        }
        public int[] Int0
        {
            get
            {
                var arr = new int[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Int0;
                return arr;
            }
        }
        public long[] Long
        {
            get
            {
                var arr = new long[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Long;
                return arr;
            }
        }
        public long[] Long0
        {
            get
            {
                var arr = new long[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Long0;
                return arr;
            }
        }
        public ulong[] ULong
        {
            get
            {
                var arr = new ulong[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.ULong;
                return arr;
            }
        }
        public ulong[] ULong0
        {
            get
            {
                var arr = new ulong[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.ULong0;
                return arr;
            }
        }
        public double[] Double
        {
            get
            {
                var arr = new double[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Double;
                return arr;
            }
        }

        public static implicit operator string[](PropertyRepeatReader rr) => rr.Ascii;
        public static implicit operator int[](PropertyRepeatReader rr) => rr.Int;
        public static implicit operator long[](PropertyRepeatReader rr) => rr.Long;
        public static implicit operator ulong[](PropertyRepeatReader rr) => rr.ULong;
        public static implicit operator double[](PropertyRepeatReader rr) => rr.Double;
    }
}
