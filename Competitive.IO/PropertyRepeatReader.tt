<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var defined = new (string Type, string Name)[]{
    ("string", "Line"),
    ("string", "String"),
    ("string", "Ascii"),
    ("int", "Int"),
    ("int", "Int0"),
    ("long", "Long"),
    ("long", "Long0"),
    ("ulong", "ULong"),
    ("ulong", "ULong0"),
    ("double", "Double"),
};
var implicits = new (string Type, string Name)[]{
    ("string", "Ascii"),
    ("int", "Int"),
    ("long", "Long"),
    ("ulong", "ULong"),
    ("double", "Double"),
};
#>
// <auto-generated>
// This code was generated by T4 template. Do not change this code.
// </auto-generated>
using System;
using System.Diagnostics;

namespace Kzrnm.Competitive.IO
{
    using static DebuggerBrowsableState;
    /// <summary>
    /// Calls <see cref="PropertyConsoleReader"/> several times
    /// </summary>
    public struct PropertyRepeatReader
    {
        internal readonly PropertyConsoleReader cr;
        internal readonly int count;
        internal PropertyRepeatReader(PropertyConsoleReader cr, int count)
        {
            this.cr = cr; this.count = count;
        }
<# foreach(var p in defined) { #>
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.<#= p.Name #>"/> array
        /// </summary>
        [DebuggerBrowsable(Never)]
        public <#= p.Type #>[] <#= p.Name #>
        {
            get
            {
                var arr = new <#= p.Type #>[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.<#= p.Name #>;
                return arr;
            }
        }
<# } #>

<# foreach(var p in implicits) { #>
        /// <summary>
        /// implicit call <see cref="PropertyRepeatReader.<#= p.Name #>"/>
        /// </summary>
        public static implicit operator <#= p.Type #>[](PropertyRepeatReader rr) => rr.<#= p.Name #>;
<# } #>
    }
    /// <summary>
    /// Defines extension
    /// </summary>
    public static class PRepeatEx
    {
        /// <summary>
        /// Get <see cref="PropertyRepeatReader"/>
        /// </summary>
        public static PropertyRepeatReader Repeat(this PropertyConsoleReader cr, int count) => new PropertyRepeatReader(cr, count);
    }
}
