// <auto-generated>
// This code was generated by T4 template. Do not change this code.
// </auto-generated>
using System.Collections.Generic;
using System.Diagnostics;

namespace Kzrnm.Competitive.IO
{
    public struct PropertySplitReader
    {
        readonly PropertyConsoleReader cr;
        internal PropertySplitReader(PropertyConsoleReader cr) { this.cr = cr; }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.String"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string[] String
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<string>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.String);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.Ascii"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string[] Ascii
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<string>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Ascii);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.Int"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int[] Int
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<int>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Int);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.Int0"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int[] Int0
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<int>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Int0);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.Long"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public long[] Long
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<long>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Long);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.Long0"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public long[] Long0
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<long>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Long0);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.ULong"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ulong[] ULong
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<ulong>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.ULong);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.ULong0"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ulong[] ULong0
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<ulong>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.ULong0);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        /// <summary>
        /// Read splited line that maps <see cref="PropertyConsoleReader.Double"/> array
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public double[] Double
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<double>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Double);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }

        public static implicit operator string[](PropertySplitReader sr) => sr.Ascii;
        public static implicit operator int[](PropertySplitReader sr) => sr.Int;
        public static implicit operator long[](PropertySplitReader sr) => sr.Long;
        public static implicit operator ulong[](PropertySplitReader sr) => sr.ULong;
        public static implicit operator double[](PropertySplitReader sr) => sr.Double;
    }
    public static class PSplitEx
    {
        /// <summary>
        /// Get <see cref="PropertySplitReader"/>
        /// </summary>
        public static PropertySplitReader Split(this PropertyConsoleReader cr) => new PropertySplitReader(cr);
    }
}
