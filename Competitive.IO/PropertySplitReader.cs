// <auto-generated>
// This code was generated by T4 template. Do not change this code.
// </auto-generated>
using System.Collections.Generic;

namespace Kzrnm.Competitive.IO
{
    public struct PropertySplitReader
    {
        readonly PropertyConsoleReader cr;
        internal PropertySplitReader(PropertyConsoleReader cr) { this.cr = cr; }
        public string[] String
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<string>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.String);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        public string[] Ascii
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<string>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Ascii);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        public int[] Int
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<int>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Int);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        public int[] Int0
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<int>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Int0);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        public long[] Long
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<long>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Long);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        public long[] Long0
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<long>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Long0);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }
        public double[] Double
        {
            get
            {
                while (cr.buffer[cr.pos] <= 32)
                    cr.MoveNext();
                var l = new List<double>();
                do
                {
                    if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                    else l.Add(cr.Double);
                } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
                return l.ToArray();
            }
        }

        public static implicit operator string[](PropertySplitReader sr) => sr.Ascii;
        public static implicit operator int[](PropertySplitReader sr) => sr.Int;
        public static implicit operator long[](PropertySplitReader sr) => sr.Long;
        public static implicit operator double[](PropertySplitReader sr) => sr.Double;
    }
}
