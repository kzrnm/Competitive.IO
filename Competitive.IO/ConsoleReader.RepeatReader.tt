<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var defined = new (string Type, string Name)[]{
    ("string", "Line"),
    ("string", "String"),
    ("string", "Ascii"),
    ("int", "Int"),
    ("int", "Int0"),
    ("long", "Long"),
    ("long", "Long0"),
    ("ulong", "ULong"),
    ("ulong", "ULong0"),
    ("double", "Double"),
};
var implicits = new (string Type, string Name)[]{
    ("string", "Ascii"),
    ("int", "Int"),
    ("long", "Long"),
    ("ulong", "ULong"),
    ("double", "Double"),
};
#>
// <auto-generated>
// This code was generated by T4 template. Do not change this code.
// </auto-generated>
using System;

namespace Kzrnm.Competitive.IO
{
    public struct RepeatReader
    {
        readonly ConsoleReader cr;
        readonly int count;
        internal RepeatReader(ConsoleReader cr, int count)
        {
            this.cr = cr; this.count = count;
        }
        /// <summary>
        /// Repeat <paramref name="factory"/>()
        /// </summary>
        public T[] Select<T>(Func<ConsoleReader, T> factory)
        {
            var arr = new T[count];
            for (var i = 0; i < count; i++)
                arr[i] = factory(cr);
            return arr;
        }
        /// <summary>
        /// Repeat <paramref name="factory"/>()
        /// </summary>
        public T[] Select<T>(Func<ConsoleReader, int, T> factory)
        {
            var arr = new T[count];
            for (var i = 0; i < count; i++)
                arr[i] = factory(cr, i);
            return arr;
        }
<# foreach(var p in defined) { #>
        /// <summary>
        /// Read <see cref="ConsoleReader.<#= p.Name #>"/> array
        /// </summary>
        public <#= p.Type #>[] <#= p.Name #>()
        {
            var arr = new <#= p.Type #>[count];
            for (var i = 0; i < count; i++)
                arr[i] = cr.<#= p.Name #>();
            return arr;
        }
<# } #>

<# foreach(var p in implicits) { #>
        public static implicit operator <#= p.Type #>[](RepeatReader rr) => rr.<#= p.Name #>();
<# } #>
    }
    public static class RepeatEx
    {
        /// <summary>
        /// Get <see cref="RepeatReader"/>
        /// </summary>
        public static RepeatReader Repeat(this ConsoleReader cr, int count) => new RepeatReader(cr, count);
    }
}
