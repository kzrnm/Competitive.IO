// <auto-generated>
// This code was generated by T4 template. Do not change this code.
// </auto-generated>
using System;
using System.Diagnostics;

namespace Kzrnm.Competitive.IO
{
    using MI = System.Runtime.CompilerServices.MethodImplAttribute;
    /// <summary>
    /// Calls <see cref="PropertyConsoleReader"/> several times
    /// </summary>
    public struct PropertyRepeatReader
    {
        internal readonly PropertyConsoleReader cr;
        internal readonly int count;
        [MI(256)]
        internal PropertyRepeatReader(PropertyConsoleReader cr, int count)
        {
            this.cr = cr; this.count = count;
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.Line"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public string[] Line
        {
            [MI(256)]
            get
            {
                var arr = new string[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Line;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.String"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public string[] String
        {
            [MI(256)]
            get
            {
                var arr = new string[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.String;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.Ascii"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public string[] Ascii
        {
            [MI(256)]
            get
            {
                var arr = new string[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Ascii;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.Int"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public int[] Int
        {
            [MI(256)]
            get
            {
                var arr = new int[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Int;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.Int0"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public int[] Int0
        {
            [MI(256)]
            get
            {
                var arr = new int[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Int0;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.UInt"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public uint[] UInt
        {
            [MI(256)]
            get
            {
                var arr = new uint[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.UInt;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.UInt0"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public uint[] UInt0
        {
            [MI(256)]
            get
            {
                var arr = new uint[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.UInt0;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.Long"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public long[] Long
        {
            [MI(256)]
            get
            {
                var arr = new long[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Long;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.Long0"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public long[] Long0
        {
            [MI(256)]
            get
            {
                var arr = new long[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Long0;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.ULong"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public ulong[] ULong
        {
            [MI(256)]
            get
            {
                var arr = new ulong[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.ULong;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.ULong0"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public ulong[] ULong0
        {
            [MI(256)]
            get
            {
                var arr = new ulong[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.ULong0;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.Double"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public double[] Double
        {
            [MI(256)]
            get
            {
                var arr = new double[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Double;
                return arr;
            }
        }
        /// <summary>
        /// Read <see cref="PropertyConsoleReader.Decimal"/> array
        /// </summary>
        [DebuggerBrowsable(0)]
        public decimal[] Decimal
        {
            [MI(256)]
            get
            {
                var arr = new decimal[count];
                for (var i = 0; i < count; i++)
                    arr[i] = cr.Decimal;
                return arr;
            }
        }

        /// <summary>
        /// implicit call <see cref="PropertyRepeatReader.Ascii"/>
        /// </summary>
        [MI(256)] public static implicit operator string[](PropertyRepeatReader rr) => rr.Ascii;
        /// <summary>
        /// implicit call <see cref="PropertyRepeatReader.Int"/>
        /// </summary>
        [MI(256)] public static implicit operator int[](PropertyRepeatReader rr) => rr.Int;
        /// <summary>
        /// implicit call <see cref="PropertyRepeatReader.UInt"/>
        /// </summary>
        [MI(256)] public static implicit operator uint[](PropertyRepeatReader rr) => rr.UInt;
        /// <summary>
        /// implicit call <see cref="PropertyRepeatReader.Long"/>
        /// </summary>
        [MI(256)] public static implicit operator long[](PropertyRepeatReader rr) => rr.Long;
        /// <summary>
        /// implicit call <see cref="PropertyRepeatReader.ULong"/>
        /// </summary>
        [MI(256)] public static implicit operator ulong[](PropertyRepeatReader rr) => rr.ULong;
        /// <summary>
        /// implicit call <see cref="PropertyRepeatReader.Double"/>
        /// </summary>
        [MI(256)] public static implicit operator double[](PropertyRepeatReader rr) => rr.Double;
        /// <summary>
        /// implicit call <see cref="PropertyRepeatReader.Decimal"/>
        /// </summary>
        [MI(256)] public static implicit operator decimal[](PropertyRepeatReader rr) => rr.Decimal;
    }
    /// <summary>
    /// Defines extension
    /// </summary>
    public static class PRepeatEx
    {
        /// <summary>
        /// Get <see cref="PropertyRepeatReader"/>
        /// </summary>
        [MI(256)] public static PropertyRepeatReader Repeat(this PropertyConsoleReader cr, int count) => new PropertyRepeatReader(cr, count);
    }
}
