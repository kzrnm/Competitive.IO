// <auto-generated>
// This code was generated by T4 template. Do not change this code.
// </auto-generated>
using System.Collections.Generic;

namespace Kzrnm.Competitive.IO
{
    /// <summary>
    /// Repeat calling <see cref="ConsoleReader"/> for line break
    /// </summary>
    public struct SplitReader
    {
        readonly ConsoleReader cr;
        internal SplitReader(ConsoleReader cr) { this.cr = cr; }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.String"/> array
        /// </summary>
        public string[] String()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<string>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.String());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.Ascii"/> array
        /// </summary>
        public string[] Ascii()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<string>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.Ascii());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.Int"/> array
        /// </summary>
        public int[] Int()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<int>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.Int());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.Int0"/> array
        /// </summary>
        public int[] Int0()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<int>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.Int0());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.Long"/> array
        /// </summary>
        public long[] Long()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<long>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.Long());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.Long0"/> array
        /// </summary>
        public long[] Long0()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<long>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.Long0());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.ULong"/> array
        /// </summary>
        public ulong[] ULong()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<ulong>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.ULong());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.ULong0"/> array
        /// </summary>
        public ulong[] ULong0()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<ulong>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.ULong0());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }
        /// <summary>
        /// Read splited line that maps <see cref="ConsoleReader.Double"/> array
        /// </summary>
        public double[] Double()
        {
            while (cr.buffer[cr.pos] <= 32)
                cr.MoveNext();
            var l = new List<double>();
            do
            {
                if (cr.buffer[cr.pos] < 32) cr.MoveNext();
                else l.Add(cr.Double());
            } while (cr.buffer[cr.pos] != 10 && cr.buffer[cr.pos] != 13);
            return l.ToArray();
        }

        /// <summary>
        /// implicit call <see cref="SplitReader.Ascii()"/>
        /// </summary>
        public static implicit operator string[](SplitReader sr) => sr.Ascii();
        /// <summary>
        /// implicit call <see cref="SplitReader.Int()"/>
        /// </summary>
        public static implicit operator int[](SplitReader sr) => sr.Int();
        /// <summary>
        /// implicit call <see cref="SplitReader.Long()"/>
        /// </summary>
        public static implicit operator long[](SplitReader sr) => sr.Long();
        /// <summary>
        /// implicit call <see cref="SplitReader.ULong()"/>
        /// </summary>
        public static implicit operator ulong[](SplitReader sr) => sr.ULong();
        /// <summary>
        /// implicit call <see cref="SplitReader.Double()"/>
        /// </summary>
        public static implicit operator double[](SplitReader sr) => sr.Double();
    }
    /// <summary>
    /// Defines extension
    /// </summary>
    public static class SplitEx
    {
        /// <summary>
        /// Get <see cref="SplitReader"/>
        /// </summary>
        public static SplitReader Split(this ConsoleReader cr) => new SplitReader(cr);
    }
}
